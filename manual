Once Dockerfile is created, run in terminal
docker build .

then create docker-compose.yml and runs
docker-compose build


then in the console you can run commands within a docker container using docker-copmose

recipe-app-api git:(main) âœ— docker-compose run app sh -c "django-admin.py startproject app ."

then push to github
git add .
git commit -a
git push

create travis CI file
add flake8 to requirements
create .flake8 file within the project

VERY USEFUL
git config --global credential.helper cache
Cache credentials


USEFUL COMMAND FOR TESTING
docker-compose run app sh -c "python manage.py test && flake8"

CREATE NEW APP
docker-compose run app sh -c "python manage.py startapp core"

CANT HAVE BOTH TEST FILE AND FOLDER (ONLY ONE)

AFTER EACH MODEL CHANGE run
docker-compose run app sh -c "python manage.py makemigrations core"


when everything is ready
docker-compose up (will start the server)

when start can access the server on 127.0.0.1:8000/admin

to create a superuser run:
docker-compose run app sh -c "python manage.py createsuperuser"
